<?php

ini_set('max_execution_time', 600);

function data_import_init() {
  require_once 'includes/password.inc';

   //var_dump( node_load(637) ); die;
  //_data_import_users();
  //_data_import_delete_users();
    // _data_import_ideas();
    // _data_import_delete_ideas();
   // _data_import_votes();
 //  _data_import_comments();
 //_data_import_delete_comments();
// die;

  // //-----[ BEGIN Make successes from nodes ]-----
  // // print '<pre>'; var_dump( node_load(1401) ); die;
  // $sql = "SELECT entity_id FROM field_data_field_workflow_state WHERE field_workflow_state_tid=".TID_IDEA_STATUS_READY_FOR_IMPLEMENTATION;
  // $result = db_query($sql);
  // $nids = array();
  // foreach( $result as $one_result ) :
    // $nids[ $one_result->entity_id ] = $one_result->entity_id;
    // // var_dump($one_result); die;
  // endforeach;
  // // var_dump($nids); die;
  
  // $nodes = node_load_multiple( $nids );
  
  // foreach( $nodes as $one_node ) :
    // // Create new portfolio item
    // $node = new stdClass();
    // $node->title = $one_node->title;
    // $node->type = 'portfolio';
    // node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    
    // $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    // $node->uid = $one_node->uid; 
    // $node->status = 1; //(1 or 0): published or not
    // $node->promote = 0; //(1 or 0): promoted to front page
    // //$node->comment = 2; // 0 = comments disabled, 1 = read only, 2 = read/write
    // $node->created = time();
    // $node->changed = time();
    // $node->body = $one_node->body;
    
    // //create user in Drupal 7 site 
 // // var_dump($node); die;
    // node_save($node);
  // endforeach;
  // //-----[ END Make successes from nodes ]-----

}

function _data_import_comments() {
  $data_file = dirname( __FILE__ ).'/data/comments.csv';
  
  if( $handle = fopen( $data_file, 'r' ) ) :
// $counter = 0;
    while( $one_row = fgetcsv($handle) ) :
      // var_dump($one_row); die;
      
      // Validate row
      if( empty($one_row[0]) || empty($one_row[2]) || empty($one_row[3]) ) :
        drupal_set_message('Skipping row b\c of empty value: '.$one_row[0].' - '.$one_row[2].' - '.$one_row[3], 'error');
        continue;
      endif;
      
      // Get the NID
      $sql = "SELECT entity_id FROM field_data_field_old_nid WHERE field_old_nid_value=".$one_row[2];
      $result = db_query($sql);
      $nid = FALSE;
      foreach( $result as $one_result ) :
        if( !empty($one_result->entity_id) ) :
          $nid = $one_result->entity_id;
          break;
        endif;
      endforeach;
      
      // Need NID
      if( !$nid ) :
        drupal_set_message( 'NID not found. Skipping row with values '.$one_row[0].' - '.$one_row[2].' - '.$one_row[3], 'warning' );
        continue;
      endif;

      // Get the user id
      $sql = "SELECT entity_id FROM field_data_field_old_uid WHERE field_old_uid_value=".$one_row[3];
      $result = db_query($sql);
      $uid = FALSE;
      foreach( $result as $one_result ) :
        if( !empty($one_result->entity_id) ) :
          $uid = $one_result->entity_id;
          break;
        endif;
      endforeach;
      
      // Need UID
      if( !$uid ) :
        drupal_set_message( 'Assigning to ADMIN row with values '.implode(' - ',$one_row) );
        $uid = 1;
      endif;
      
      // Build comment object
      $comment = new stdClass();

      // Add fields
      //$comment->cid = 0; // leave it as is
      $comment->pid = 0; // parent comment id, 0 if none 
      $comment->nid = $nid; // nid of a node you want to attach a comment to
      $comment->uid = $uid; // user's id, who left the comment
      $comment->subject = $one_row[4]; 
      $comment->comment_body[LANGUAGE_NONE][0]['value'] = $one_row[5]; // Everything here is pretty much like with a node
      $comment->comment_body[LANGUAGE_NONE][0]['format'] = 'filtered_html'; 
      $comment->hostname = $one_row[6]; // OPTIONAL. You can log poster's ip here
      $comment->created = $one_row[7]; // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
      $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
      $comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
      $comment->mail = ''; // user's email
      $comment->name = 'User name'; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
      $comment->is_anonymous = 0; // leave it as is
      $comment->homepage = ''; // you can add homepage URL here
      $comment->language = LANGUAGE_NONE; // The same as for a node    

      // Save it up
      comment_submit($comment); // prepare comment to be saved
      comment_save($comment); // save the comment

 // break;
// // ++$counter;
// // if( $counter > 10 ) break;
    endwhile;
    
    fclose($handle);
    drupal_set_message(__FUNCTION__.'() ran to completion');
  else :
    drupal_set_message('failed to open');
  endif;
die;
}

function _data_import_delete_comments() {
  $sql = "SELECT cid FROM comment";
  $result = db_query($sql);
  
  $all_cids = array();
  foreach( $result as $one_result ) :
    $all_cids[ $one_result->cid ] = $one_result->cid;
  endforeach;
  
  comment_delete_multiple( $all_cids );
}

function _data_import_votes() {
  $data_file = dirname( __FILE__ ).'/data/votes.csv';
  
  if( $handle = fopen( $data_file, 'r' ) ) :
// $counter = 0;
    while( $one_row = fgetcsv($handle) ) :
      // var_dump($one_row); die;
      
      // Validate row
      if( empty($one_row[0]) || empty($one_row[1]) || empty($one_row[2]) ) :
        continue;
      endif;
      

      // Get the nid
      $sql = "SELECT entity_id FROM field_data_field_old_nid WHERE field_old_nid_value=".$one_row[0];
      $result = db_query($sql);
      $nid = FALSE;
      foreach( $result as $one_result ) :
        if( !empty($one_result->entity_id) ) :
          $nid = $one_result->entity_id;
          break;
        endif;
      endforeach;
      
      // Need NID
      if( !$nid ) :
        drupal_set_message( 'Skipping row with values '.implode(' - ',$one_row) );
        continue;
      endif;



      // Get the user id
      $sql = "SELECT entity_id FROM field_data_field_old_uid WHERE field_old_uid_value=".$one_row[2];
      $result = db_query($sql);
      $uid = FALSE;
      foreach( $result as $one_result ) :
        if( !empty($one_result->entity_id) ) :
          $uid = $one_result->entity_id;
          break;
        endif;
      endforeach;
      
      // Need UID
      if( !$uid ) :
        drupal_set_message( 'Assigning to ADMIN row with values '.implode(' - ',$one_row) );
        $uid = 1;
      endif;

      // Assign vote
// _fivestar_cast_vote($entity_type, $id, $value, $tag = NULL, $uid = NULL, $skip_validation = FALSE, $vote_source = NULL)
      _fivestar_cast_vote('node', $nid, $one_row[1], 'vote', $uid, FALSE, $uid);

 // break;
// ++$counter;
// if( $counter > 10 ) break;
    endwhile;
    
    fclose($handle);
  else :
    drupal_set_message('failed to open');
  endif;
die;
}

function _data_import_delete_ideas() {
  $sql = "SELECT nid FROM node WHERE type='idea'";
  $result = db_query($sql);
  
  $nids = array();
  foreach( $result as $one_nid ) :
    $nids[ $one_nid->nid ] = $one_nid->nid;
  endforeach;

  node_delete_multiple($nids);
  die;
}

function _data_import_ideas() {
  $data_file = dirname( __FILE__ ).'/data/ideas.csv';
  
  if( $handle = fopen( $data_file, 'r' ) ) :
// $counter = 0;
    while( $one_row = fgetcsv($handle) ) :
      // var_dump($one_row); die;
      
      // Validate row
      if( empty($one_row[0]) || empty($one_row[1]) ) :
        continue;
      endif;
      
      // Get the user id
      $sql = "SELECT entity_id FROM field_data_field_old_uid WHERE field_old_uid_value=".$one_row[2];
      $result = db_query($sql);
      $uid = FALSE;
      foreach( $result as $one_result ) :
        if( !empty($one_result->entity_id) ) :
          $uid = $one_result->entity_id;
          break;
        endif;
      endforeach;
      
      // Need UID
      if( !$uid ) :
        $uid = 1;
      endif;
      
      // Get the workflow status
      switch( strtolower($one_row[7]) ) :
        case 'great minds':
          $workflow_tid = TID_IDEA_STATUS_REJECTED;
        break;
        
        case 'implemented':
        case 'in progress':
        case 'resolved':
        case 'submitted':
          $workflow_tid = TID_IDEA_STATUS_READY_FOR_IMPLEMENTATION;
        break;
        
        default:
          $workflow_tid = TID_IDEA_STATUS_NEW;
        break;
      endswitch;

      // Create new idea
      $node = new stdClass();
      $node->title = $one_row[1];
      $node->type = 'idea';
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $node->uid = $uid; 
      $node->status = 1; //(1 or 0): published or not
      $node->promote = 0; //(1 or 0): promoted to front page
      //$node->comment = 2; // 0 = comments disabled, 1 = read only, 2 = read/write
      $node->created = $one_row[4];
      $node->changed = $one_row[5];
      $node->body[LANGUAGE_NONE][0] = array(
        'value' => $one_row[6],
        'format' => 'filtered_html',
      );
      $node->field_workflow_state[LANGUAGE_NONE][0]['tid'] = $workflow_tid;
      $node->field_old_nid[LANGUAGE_NONE][0]['value'] = $one_row[0];
      
      //create user in Drupal 7 site 
// var_dump($node); die;
      node_save($node);
// break;
// ++$counter;
// if( $counter > 10 ) break;
    endwhile;
    
    fclose($handle);
  else :
    drupal_set_message('failed to open');
  endif;
die;
}

function _data_import_users() {
  $data_file = dirname( __FILE__ ).'/data/all_users.csv';
  
  if( $handle = fopen( $data_file, 'r' ) ) :
// $counter = 0;
    while( $one_row = fgetcsv($handle) ) :
      //var_dump($one_row); die;
      
      // Validate row
      if( empty($one_row[7]) || empty($one_row[6]) ) :
        continue;
      endif;
      
      // Create new user
      $account = new stdClass;
      $account->is_new = TRUE;
      $account->name = $one_row[6];
      $account->pass = user_hash_password(user_password());
      $account->mail = $one_row[2];
      $account->init = $one_row[2];
      $account->status = ( strtolower($one_row[0])==='true' ? TRUE : FALSE );
      $account->roles = array(DRUPAL_AUTHENTICATED_RID => TRUE);
      $account->timezone = 'America/New_York';
      $account->created = strtotime( $one_row[1] );
      $account->access = strtotime( $one_row[4] );
      $account->login = strtotime( $one_row[5] );
      $account->field_office[LANGUAGE_NONE][0]['value'] = $one_row[9];
      $account->field_old_uid[LANGUAGE_NONE][0]['value'] = $one_row[7];
      //create user in Drupal 7 site 
// var_dump($account); die;
      user_save($account);
      
// ++$counter;
// if( $counter > 10 ) break;
    endwhile;
    
    fclose($handle);
  else :
    drupal_set_message('failed to open');
  endif;
}

function _data_import_delete_users() {
  $sql = "SELECT uid FROM users WHERE uid>1 ORDER BY uid";
  $result = db_query($sql);
  
  $uids = array();
  foreach( $result as $one_result ) :
    $uids[ $one_result->uid ] = $one_result->uid;
  endforeach;
  
  user_delete_multiple( $uids );
}